var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"","category":"page"},{"location":"api/","page":"API","title":"API","text":"CurrentModule = Brillouin","category":"page"},{"location":"api/#Exported-types","page":"API","title":"Exported types","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [Brillouin.WignerSeitz, Brillouin.KPaths]\nPrivate = false\nOrder   = [:type]","category":"page"},{"location":"api/#Exported-methods","page":"API","title":"Exported methods","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [Brillouin.WignerSeitz, Brillouin.KPaths]\nPrivate = false\nOrder   = [:function]","category":"page"},{"location":"api/#Brillouin.WignerSeitz.wignerseitz-Union{Tuple{AbstractArray{var\"#s19\",1} where var\"#s19\"<:(StaticArrays.SArray{Tuple{D},var\"#s18\",1,D} where var\"#s18\"<:Real)}, Tuple{D}} where D","page":"API","title":"Brillouin.WignerSeitz.wignerseitz","text":"wignerseitz(Vs::AbstractVector{<:SVector{D}}; merge::Bool = true, Nmax = 3)\nwignerseitz(Vs::AbstractVector{AbstractVector}; merge::Bool = true, Nmax = 3)\n                                                            --> Cell{D}\n\nReturn a Cell{D} structure, containing the vertices and associated (outward oriented) faces, of the Wigner-Seitz cell defined by a basis Vs in D dimensions.\n\nKeyword arguments\n\nmerge (default, true): if :true, co-planar faces are merged to form polygonal planar faces (e.g., triangles, quadrilaterals, and ngons generally). If false, raw \"unprocessed\" triangles (D=3) and segments (D=2) are returned instead. merge has no impact for D=1.\nNmax (default, 3): includes -Nmax:Nmax points in the initial lattice used to generate the underlying Voronoi tesselation. It is unwise to set this to anything lower than 3 without explicitly testing convergence; and probably unnecessary to increase it beyond 3 as well.\n\n\n\n\n\n","category":"method"},{"location":"api/#Brillouin.KPaths.cartesianize!-Union{Tuple{D}, Tuple{KPath{D},Union{AbstractArray{var\"#s12\",1} where var\"#s12\"<:(StaticArrays.SArray{Tuple{D},var\"#s13\",1,D} where var\"#s13\"<:Real), AbstractArray{var\"#s46\",1} where var\"#s46\"<:(AbstractArray{var\"#s32\",1} where var\"#s32\"<:Real)}}} where D","page":"API","title":"Brillouin.KPaths.cartesianize!","text":"cartesianize(kp::KPath, Gs::BasisLike)\n\nTransform a k-path kp to a Cartesian coordinate system using a primitive basis Gs. Modifies the underlying dictionary in kp in-place.\n\n\n\n\n\n","category":"method"},{"location":"api/#Brillouin.KPaths.interpolate-Tuple{AbstractArray{var\"#s18\",1} where var\"#s18\"<:(AbstractArray{var\"#s19\",1} where var\"#s19\"<:Real),Integer}","page":"API","title":"Brillouin.KPaths.interpolate","text":"interpolate(kvs::AbstractVector{<:AbstractVector{<:Real}}, N::Integer) \n    --> Vector{<:Vector{<:Real}}, Int64\n\nReturn an interpolated k-path between discrete k-points in kvs, with approximately N interpolation points in total (typically fewer).\n\nSince the actual number of interpolation points is not be guaranteed to equal N, the actual number of interpolation points is returned in addition to the interpolation itself.\n\nNote that, in general, it is not possible to do this so that all interpolated k-points are equidistant; samples are however exactly equidistant across each linear segment defined by points in kvs and approximately equidistant across all segments.\n\nSee also splice.\n\n\n\n\n\n","category":"method"},{"location":"api/#Brillouin.KPaths.interpolate-Tuple{KPath,Integer}","page":"API","title":"Brillouin.KPaths.interpolate","text":"interpolate(kp::KPath, N::Integer; legacy::Bool=false)\n\nReturn an interpolation of kp with approximately N points distributed across all path segments. See also interpolate(::AbstractVector, ::Integer)].\n\n\n\n\n\n","category":"method"},{"location":"api/#Brillouin.KPaths.irrfbz_path","page":"API","title":"Brillouin.KPaths.irrfbz_path","text":"irrfbz_path(sgnum::Integer, Rs::Union{Nothing, AbstractArray{var\"#s12\",1} where var\"#s12\"<:(StaticArrays.SArray{Tuple{D},var\"#s13\",1,D} where var\"#s13\"<:Real) where D}=nothing)   -->  ::KPath\n\nReturns a k-path (::KPath) in the (primitive) irreducible Brillouin zone that includes all distinct high-symmetry lines and points as well as parts of the Brillouin zone boundary.\n\nRs refers to the direct basis of the conventional unit cell. For some space groups, it is needed to disambiguate the \"extended\" Bravais types that may differ depending on the lengths of the lattice vectors (because the Brillouin zone may depend on these lengths). If the requested space group is known to not fall under this case, Rs can be supplied as nothing (default).\n\nNote that the returned k-points are given in the basis of the primitive reciprocal basis (see cartesianize!).\n\nTo interpolate the resulting KPath, see interpolate(::KPath, ::Integer) and splice(::KPath, ::Integer).\n\nData and referencing\n\nAll data is sourced from the SeeK HPKOT publication[1]: please cite the original work.\n\nAll paths currently assume time-reversal symmetry (or, equivalently, inversion symmetry),  corresponding to the SeeK's [with inversion] setting. If neither inversion nor time-reversal, include the \"inverted\" **-k* paths as well manually.\n\n[1] Hinuma, Pizzi, Kumagai, Oba, & Tanaka, Band structure diagram paths based on     crystallography,      Comp. Mat. Sci. 128, 140 (2017)\n\n\n\n\n\n","category":"function"},{"location":"api/#Brillouin.KPaths.paths-Tuple{KPath}","page":"API","title":"Brillouin.KPaths.paths","text":"paths(kp::KPath) -> Dict{Symbol, SVector{D,Float64}}\n\nReturn a vector of vectors, with each vector describing a connected path between between k-points referenced in kp (see also points(::KPath)).\n\n\n\n\n\n","category":"method"},{"location":"api/#Brillouin.KPaths.points-Tuple{KPath}","page":"API","title":"Brillouin.KPaths.points","text":"points(kp::KPath) -> Dict{Symbol, SVector{D,Float64}}\n\nReturn a dictionary of the k-points (values) and associated k-labels (keys) referenced in kp.\n\n\n\n\n\n","category":"method"},{"location":"api/#Brillouin.KPaths.splice-Tuple{AbstractArray{var\"#s17\",1} where var\"#s17\"<:(AbstractArray{var\"#s16\",1} where var\"#s16\"<:Real),Integer}","page":"API","title":"Brillouin.KPaths.splice","text":"splice(kvs::AbstractVector{<:AbstractVector{<:Real}}, N::Integer) \n    --> Vector{<:Vector{<:Real}}\n\nReturn an interpolated k-path between the discrete k-points in kvs, with N interpolation points inserted in each segment defined by pairs of adjacent k-points.\n\nSee also interpolate.\n\n\n\n\n\n","category":"method"},{"location":"api/#Brillouin.KPaths.splice-Tuple{KPath,Integer}","page":"API","title":"Brillouin.KPaths.splice","text":"splice(kp::KPath, N::Integer)\n\nReturn an interpolation of kp with N points inserted into each segment of paths in  kp. See also splice(::AbstractVector, ::Integer).\n\n\n\n\n\n","category":"method"},{"location":"api/#Exported-constants","page":"API","title":"Exported constants","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [Brillouin.WignerSeitz, Brillouin.KPaths]\nPrivate = false\nOrder   = [:constant]","category":"page"},{"location":"kpaths/#**k**-space-paths","page":"k-space paths","title":"k-space paths","text":"","category":"section"},{"location":"kpaths/","page":"k-space paths","title":"k-space paths","text":"To generate a k-path for, say, space group 202 (a cubic face-centered Bravais lattice), we can call irrfbz_path, which will return a minimal path in the irreducible Brillouin zone:","category":"page"},{"location":"kpaths/","page":"k-space paths","title":"k-space paths","text":"using Brillouin\nsgnum = 202\nRs = [[1,0,0], [0,1,0], [0,0,1]] # conventional direct basis\nkp = irrfbz_path(sgnum, Rs)","category":"page"},{"location":"kpaths/","page":"k-space paths","title":"k-space paths","text":"The path data is sourced from the HPKOT paper (or, equivalently, the SeeK-path Python package).","category":"page"},{"location":"kpaths/","page":"k-space paths","title":"k-space paths","text":"The resulting KPath structure initially gives the k-point coordinates in the basis of the primitive reciprocal basis. To convert to a Cartesian basis, we use cartesianize!:","category":"page"},{"location":"kpaths/","page":"k-space paths","title":"k-space paths","text":"pGs = 2π.*[[-1,1,1], [1,-1,1], [1,1,-1]] # primitive reciprocal basis\ncartesianize!(kp, pGs)","category":"page"},{"location":"kpaths/","page":"k-space paths","title":"k-space paths","text":"We can visualize the k-path using PlotlyJS.jl:","category":"page"},{"location":"kpaths/","page":"k-space paths","title":"k-space paths","text":"using PlotlyJS\nPᵏ = plot(kp)\nMain.HTMLPlot(Pᵏ) # hide","category":"page"},{"location":"kpaths/","page":"k-space paths","title":"k-space paths","text":"Usually though, it'll be more helpful to understand the path's geometry in the context of the associated Brillouin zone. To visualize this, we can simply plot the combination of a Cell (created via wignerseitz) and a KPath:","category":"page"},{"location":"kpaths/","page":"k-space paths","title":"k-space paths","text":"c = wignerseitz(pGs)\nPᶜ⁺ᵏ = plot(c, kp)\nMain.HTMLPlot(Pᶜ⁺ᵏ) # hide","category":"page"},{"location":"kpaths/#Interpolation","page":"k-space paths","title":"Interpolation","text":"","category":"section"},{"location":"kpaths/","page":"k-space paths","title":"k-space paths","text":"Interpolation of a KPath structure can be achieved using either interpolate(::KPath, ::Integer) or splice(::KPath, ::Integer).","category":"page"},{"location":"wignerseitz/#Wigner–Seitz-cells","page":"Wigner–Seitz cells","title":"Wigner–Seitz cells","text":"","category":"section"},{"location":"wignerseitz/#Unit-cells","page":"Wigner–Seitz cells","title":"Unit cells","text":"","category":"section"},{"location":"wignerseitz/","page":"Wigner–Seitz cells","title":"Wigner–Seitz cells","text":"The Wigner–Seitz cell associated with an arbitrary lattice basis can be generated via wignerseitz. For example, to generate the unit cell of a (primitive) lattice with Bravais type cF, we might write:","category":"page"},{"location":"wignerseitz/","page":"Wigner–Seitz cells","title":"Wigner–Seitz cells","text":"using Brillouin\n\nRs = [[0.0, 0.5, 0.5], [0.5, 0.0, 0.5], [0.5, 0.5, 0.0]]\ncᴿ = wignerseitz(Rs)","category":"page"},{"location":"wignerseitz/","page":"Wigner–Seitz cells","title":"Wigner–Seitz cells","text":"We can plot the generated cells using e.g. PlotlyJS.jl via plot(cᴿ) (or, alternatively, via a 3D-capable backend of AbstractPlotting.jl):","category":"page"},{"location":"wignerseitz/","page":"Wigner–Seitz cells","title":"Wigner–Seitz cells","text":"using PlotlyJS\nPᴿ = plot(cᴿ)\nMain.HTMLPlot(Pᴿ) # hide","category":"page"},{"location":"wignerseitz/#Brillouin-zones","page":"Wigner–Seitz cells","title":"Brillouin zones","text":"","category":"section"},{"location":"wignerseitz/","page":"Wigner–Seitz cells","title":"Wigner–Seitz cells","text":"To generate Brillouin zones, we simply give the corresponding reciprocal lattice Gs:","category":"page"},{"location":"wignerseitz/","page":"Wigner–Seitz cells","title":"Wigner–Seitz cells","text":"Gs = 2π.*[[-1.0, 1.0, 1.0], [1.0, -1.0, 1.0], [1.0, 1.0, -1.0]] # reciprocal basis of `Rs`\ncᴳ = wignerseitz(Gs)\nPᴳ = plot(cᴳ)\nMain.HTMLPlot(Pᴳ) # hide","category":"page"},{"location":"wignerseitz/#Two-dimensions","page":"Wigner–Seitz cells","title":"Two dimensions","text":"","category":"section"},{"location":"wignerseitz/","page":"Wigner–Seitz cells","title":"Wigner–Seitz cells","text":"wignerseitz and plot(::Cell) works in two dimensions as well. As an example, we can illustrate the Wigner–Seitz unit cell of graphene (which has a hexagonal \"hp\" Bravais type):","category":"page"},{"location":"wignerseitz/","page":"Wigner–Seitz cells","title":"Wigner–Seitz cells","text":"using Brillouin, PlotlyJS\n\nRs = [[1.0, 0.0], [-0.5, √3/2]]\ncᴿ = wignerseitz(Rs)\nPᴿ = plot(cᴿ)\nMain.HTMLPlot(Pᴿ) # hide","category":"page"},{"location":"wignerseitz/","page":"Wigner–Seitz cells","title":"Wigner–Seitz cells","text":"and its associated Brillouin zone:","category":"page"},{"location":"wignerseitz/","page":"Wigner–Seitz cells","title":"Wigner–Seitz cells","text":"Gs = 2π.*[[1.0, 1/√3], [0.0, 2/√3]]\ncᴳ = wignerseitz(Gs)\nPᴳ = plot(cᴳ)\nMain.HTMLPlot(Pᴳ) # hide","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = Brillouin","category":"page"},{"location":"#Brillouin.jl","page":"Home","title":"Brillouin.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for Brillouin.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"wignerseitz.md\",\n         \"kpaths.md\",\n         \"api.md\"]","category":"page"}]
}
