var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"","category":"page"},{"location":"api/","page":"API","title":"API","text":"CurrentModule = Brillouin","category":"page"},{"location":"api/#Exported-types","page":"API","title":"Exported types","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [Brillouin.WignerSeitz, Brillouin.KPath]\nPrivate = false\nOrder   = [:type]","category":"page"},{"location":"api/#Exported-methods","page":"API","title":"Exported methods","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [Brillouin.WignerSeitz, Brillouin.KPath]\nPrivate = false\nOrder   = [:function]","category":"page"},{"location":"api/#Brillouin.WignerSeitz.wignerseitz-Union{Tuple{AbstractArray{var\"#s12\",1} where var\"#s12\"<:(StaticArrays.SArray{Tuple{D},var\"#s49\",1,D} where var\"#s49\"<:Real)}, Tuple{D}} where D","page":"API","title":"Brillouin.WignerSeitz.wignerseitz","text":"wignerseitz(Vs::AbstractVector{<:SVector{D}}; merge::Bool = true, Nmax = 3)\nwignerseitz(Vs::AbstractVector{AbstractVector}; merge::Bool = true, Nmax = 3)\n                                                            --> Cell{D}\n\nReturn a Cell{D} structure, containing the vertices and associated (outward oriented) faces, of the Wigner-Seitz cell defined by a basis Vs in D dimensions.\n\nKeyword arguments\n\nmerge (default, true): if :true, co-planar faces are merged to form polygonal planar faces (e.g., triangles, quadrilaterals, and ngons generally). If false, raw \"unprocessed\" triangles (D=3) and segments (D=2) are returned instead. merge has no impact for D=1.\nNmax (default, 3): includes -Nmax:Nmax points in the initial lattice used to generate the underlying Voronoi tesselation. It is unwise to set this to anything lower than 3 without explicitly testing convergence; and probably unnecessary to increase it beyond 3 as well.\n\n\n\n\n\n","category":"method"},{"location":"api/#Brillouin.KPath.interpolate_path-Tuple{AbstractArray{var\"#s18\",1} where var\"#s18\"<:(AbstractArray{var\"#s19\",1} where var\"#s19\"<:Real),Integer}","page":"API","title":"Brillouin.KPath.interpolate_path","text":"interpolate_path(kvs::AbstractVector{<:AbstractVector{<:Real}}, N::Integer) \n    --> Vector{<:Vector{<:Real}}, Int64\n\nReturn an interpolated k-path between discrete k-points in kvs, with approximately N interpolation points in total (typically fewer).\n\nSince the actual number of interpolation points is not be guaranteed to equal N, the actual number of interpolation points is returned in addition to the interpolation itself.\n\nNote that, in general, it is not possible to do this so that all interpolated k-points are equidistant; samples are however exactly equidistant across each linear segment defined by points in kvs and approximately equidistant across all segments.\n\nSee also splice_path.\n\n\n\n\n\n","category":"method"},{"location":"api/#Brillouin.KPath.irrfbz_path-Union{Tuple{D}, Tuple{Integer,Integer}, Tuple{Integer,Integer,Union{Nothing, AbstractArray{StaticArrays.SArray{Tuple{D},var\"#s12\",1,D} where var\"#s12\"<:Real,1}}}} where D","page":"API","title":"Brillouin.KPath.irrfbz_path","text":"irrfbz_path(sgnum::Integer, Nk::Integer, Rs::Union{Nothing, AbstractArray{StaticArrays.SArray{Tuple{D},var\"#s12\",1,D} where var\"#s12\"<:Real,1} where D}=nothing; \n    pathtype::String=\"SeeK\", has_inversion_or_tr::Bool=true,\n    splice::Bool=false, legacy::Bool=false)\n                                            --> paths_kvs, paths_labs, lab2kv\n\nReturns a k-path in the (primitive) irreducible Brillouin zone that includes all  distinct high-symmetry lines and points as well as parts of the Brillouin zone boundary.\n\nRs refers to the direct basis of the conventional unitcell. For some space groups, it is needed to disambiguate the \"extended\" Bravais types that may differ depending on the lengths of the lattice vectors (because the Brillouin zone may depend on these lengths). If the requested space group is known to not fall under this case, Rs can be supplied as nothing (default).\n\nData and referencing\n\nAll data is sourced from the SeeK publication[1]: please cite the original work.\n\nAll paths currently assume time-reversal symmetry (or, equivalently, inversion symmetry),  corresponding to the SeeK's [with inversion] setting. If neither inversion nor time-reversal symmetry is present, additional paths may be required (SeeK's [no inversion] setting).\n\n[1] Hinuma, Pizzi, Kumagai, Oba, & Tanaka, Band structure diagram paths based on     crystallography, Comp. Mat. Sci. 128, 140 (2017)](http://dx.doi.org/10.1016/j.commatsci.2016.10.015)     (see also online interface at https://www.materialscloud.org/work/tools/seekpath).\n\n\n\n\n\n","category":"method"},{"location":"api/#Brillouin.KPath.splice_path-Tuple{AbstractArray{var\"#s17\",1} where var\"#s17\"<:(AbstractArray{var\"#s16\",1} where var\"#s16\"<:Real),Integer}","page":"API","title":"Brillouin.KPath.splice_path","text":"splice_path(kvs::AbstractVector{<:AbstractVector{<:Real}}, N::Integer) \n    --> Vector{<:Vector{<:Real}}\n\nComputes an interpolated k-path between the discrete k-points in kvs, with N interpolation points inserted in each segment defined by pairs of adjacent k-points.\n\nSee also interpolate_path.\n\n\n\n\n\n","category":"method"},{"location":"api/#Exported-constants","page":"API","title":"Exported constants","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [Brillouin.WignerSeitz, Brillouin.KPath]\nPrivate = false\nOrder   = [:constant]","category":"page"},{"location":"wignerseitz/#Wigner–Seitz-cells","page":"Wigner–Seitz","title":"Wigner–Seitz cells","text":"","category":"section"},{"location":"wignerseitz/#Unit-cells","page":"Wigner–Seitz","title":"Unit cells","text":"","category":"section"},{"location":"wignerseitz/","page":"Wigner–Seitz","title":"Wigner–Seitz","text":"The Wigner–Seitz cell associated with an arbitrary lattice basis can be generated via wignerseitz. For example, to generate the unit cell of a (primitive) lattice with Bravais type cF, we might write:","category":"page"},{"location":"wignerseitz/","page":"Wigner–Seitz","title":"Wigner–Seitz","text":"using Brillouin\n\nRs = [[0.0, 0.5, 0.5], [0.5, 0.0, 0.5], [0.5, 0.5, 0.0]]\ncᴿ = wignerseitz(Rs)","category":"page"},{"location":"wignerseitz/","page":"Wigner–Seitz","title":"Wigner–Seitz","text":"We can plot the generated cells using e.g. PlotlyJS.jl via plot(cᴿ) (or, alternatively, via a 3D-capable backend of AbstractPlotting.jl):","category":"page"},{"location":"wignerseitz/","page":"Wigner–Seitz","title":"Wigner–Seitz","text":"using PlotlyJS\nPᴿ = plot(cᴿ)\nMain.HTMLPlot(Pᴿ) # hide","category":"page"},{"location":"wignerseitz/#Brillouin-zones","page":"Wigner–Seitz","title":"Brillouin zones","text":"","category":"section"},{"location":"wignerseitz/","page":"Wigner–Seitz","title":"Wigner–Seitz","text":"To generate Brillouin zones, we simply give the corresponding reciprocal lattice Gs:","category":"page"},{"location":"wignerseitz/","page":"Wigner–Seitz","title":"Wigner–Seitz","text":"Gs = 2π.*[[-1.0, 1.0, 1.0], [1.0, -1.0, 1.0], [1.0, 1.0, -1.0]] # reciprocal basis of `Rs`\ncᴳ = wignerseitz(Gs)\nPᴳ = plot(cᴳ)\nMain.HTMLPlot(Pᴳ) # hide","category":"page"},{"location":"wignerseitz/#Two-dimensions","page":"Wigner–Seitz","title":"Two dimensions","text":"","category":"section"},{"location":"wignerseitz/","page":"Wigner–Seitz","title":"Wigner–Seitz","text":"wignerseitz and plot(::Cell) works in two dimensions as well. As an example, we can illustrate the Wigner–Seitz unit cell of graphene (which has a hexagonal \"hp\" Bravais type):","category":"page"},{"location":"wignerseitz/","page":"Wigner–Seitz","title":"Wigner–Seitz","text":"using Brillouin, PlotlyJS\n\nRs = [[1.0, 0.0], [-0.5, √3/2]]\ncᴿ = wignerseitz(Rs)\nPᴿ = plot(cᴿ)\nMain.HTMLPlot(Pᴿ) # hide","category":"page"},{"location":"wignerseitz/","page":"Wigner–Seitz","title":"Wigner–Seitz","text":"and its associated Brillouin zone:","category":"page"},{"location":"wignerseitz/","page":"Wigner–Seitz","title":"Wigner–Seitz","text":"Gs = 2π.*[[1.0, 1/√3], [0.0, 2/√3]]\ncᴳ = wignerseitz(Gs)\nPᴳ = plot(cᴳ)\nMain.HTMLPlot(Pᴳ) # hide","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = Brillouin","category":"page"},{"location":"#Brillouin.jl","page":"Home","title":"Brillouin.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for Brillouin.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"wignerseitz.md\",\n         \"api.md\"]","category":"page"}]
}
