# ----------------------------------------------------------------------------
# This file was created by manually inspecting 2D Brillouin zones.
# ----------------------------------------------------------------------------

const pathsd_2d = Dict(
    :hp1 => [[:Γ, :M, :K, :Γ]],
    # ------------------------------------------------------------------------------------ #
    :tp1 => [[:Γ, :M, :X, :Γ]],
    # ------------------------------------------------------------------------------------ #
    :op1 => [[:Γ, :Y, :S, :X, :Γ]], # op1 and op2 are really the same paths; they differ
    :op2 => [[:Γ, :X, :S, :Y, :Γ]], # only in the definition of :X and :Y points (swapped)
    # ------------------------------------------------------------------------------------ #
    :oc1 => [[:C₀, :Y, :Γ, :Σ₀], [:Γ, :S]], # the k-point labels picked here are plane group
    :oc2 => [[:Δ₀, :Γ, :Y, :F₀], [:Γ, :S]], # 9's; they may not agree with plane group 5
    # TODO: think about if we can do better for plane group 5
    # ------------------------------------------------------------------------------------ #
    :mp1 => [[:Γ, :B], [:Γ, :Y], [:Γ, :A]], # the two settings have different definitions of
    :mp2 => [[:Γ, :B], [:Γ, :Y], [:Γ, :A]]  # :A [(1/2, +1/2) in mp1 and (1/2, -1/2) in mp2]
)

const pointsd_2d = Dict(
    :hp1 => [:Γ => :([0, 0]), :M => :([1/2, 0]), :K => :([1/3, 1/3])],
    # ------------------------------------------------------------------------------------ #
    :tp1 => [:Γ => :([0, 0]), :X => :([0, 1/2]), :M => :([1/2, 1/2])],
    # ------------------------------------------------------------------------------------ #
    :op1 => [:Γ => :([0, 0]), :X => :([0, 1/2]), :S => :([1/2, 1/2]), :Y => :([1/2, 0])],
    :op2 => [:Γ => :([0, 0]), :X => :([1/2, 0]), :S => :([1/2, 1/2]), :Y => :([0, 1/2])],
    # ------------------------------------------------------------------------------------ #
    :oc1 => [:Γ => :([0, 0]), :Y => :([-1/2, 1/2]), :C₀ => :([-δ, 1-δ]), :S => :([0, 1/2]), :Σ₀ => :([δ,  δ])],
    :oc2 => [:Γ => :([0, 0]), :Y => :([1/2, 1/2]),  :F₀ => :([δ,  1-δ]), :S => :([0, 1/2]), :Δ₀ => :([-δ, δ])],
    # ------------------------------------------------------------------------------------ #
    :mp1 => [:Γ => :([0, 0]), :B => :([1/2, 0]), :Y => :([0, 1/2]), :A => :([1/2, +1/2])],
    :mp2 => [:Γ => :([0, 0]), :B => :([1/2, 0]), :Y => :([0, 1/2]), :A => :([1/2, -1/2])]
)

const paramsd_2d = Dict(
   :oc1 => [:δ => :(0.25 * ( 1 + (a*a) / (b*b) ) )],
   :oc2 => [:δ => :(0.25 * ( 1 + (b*b) / (a*a) ) )]
)
